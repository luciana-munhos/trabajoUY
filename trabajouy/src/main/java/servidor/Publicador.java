
package servidor;

import javax.xml.datatype.XMLGregorianCalendar;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.jws.soap.SOAPBinding;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Action;
import jakarta.xml.ws.FaultAction;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.1
 * Generated source version: 3.0
 * 
 */
@WebService(name = "Publicador", targetNamespace = "http://servidor/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Publicador {


    /**
     * 
     * @param fileName
     * @return
     *     returns byte[]
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getFileRequest", output = "http://servidor/Publicador/getFileResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://servidor/Publicador/getFile/Fault/IOException")
    })
    public byte[] getFile(
        @WebParam(name = "fileName", partName = "fileName")
        String fileName)
        throws IOException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.StringArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarEmpresasRequest", output = "http://servidor/Publicador/mostrarEmpresasResponse")
    public StringArray mostrarEmpresas();

    /**
     * 
     * @return
     *     returns servidor.StringArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getKeywordsRequest", output = "http://servidor/Publicador/getKeywordsResponse")
    public StringArray getKeywords();

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtTipoPublicacion
     * @throws NoExisteTipoPublicacion_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getInfoTipoPublicacionRequest", output = "http://servidor/Publicador/getInfoTipoPublicacionResponse", fault = {
        @FaultAction(className = NoExisteTipoPublicacion_Exception.class, value = "http://servidor/Publicador/getInfoTipoPublicacion/Fault/NoExisteTipoPublicacion")
    })
    public DtTipoPublicacion getInfoTipoPublicacion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteTipoPublicacion_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.StringArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarNicknamesUsuariosRequest", output = "http://servidor/Publicador/listarNicknamesUsuariosResponse")
    public StringArray listarNicknamesUsuarios();

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtUsuario
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarDatosUsuarioRequest", output = "http://servidor/Publicador/mostrarDatosUsuarioResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarDatosUsuario/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/mostrarDatosUsuario/Fault/NoExistePostulante")
    })
    public DtUsuario mostrarDatosUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtPaquete
     * @throws NoExistePaquete_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getInfoPaqueteRequest", output = "http://servidor/Publicador/getInfoPaqueteResponse", fault = {
        @FaultAction(className = NoExistePaquete_Exception.class, value = "http://servidor/Publicador/getInfoPaquete/Fault/NoExistePaquete")
    })
    public DtPaquete getInfoPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePaquete_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg10
     * @param arg11
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @param arg6
     * @param arg7
     * @param arg8
     * @param arg9
     * @throws NoExisteEmpresa_Exception
     * @throws NoExisteKeyword_Exception
     * @throws NoExisteTipoPublicacion_Exception
     * @throws NombreOfertaExistente_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/ingresarOfertaRequest", output = "http://servidor/Publicador/ingresarOfertaResponse", fault = {
        @FaultAction(className = NombreOfertaExistente_Exception.class, value = "http://servidor/Publicador/ingresarOferta/Fault/NombreOfertaExistente"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/ingresarOferta/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExisteTipoPublicacion_Exception.class, value = "http://servidor/Publicador/ingresarOferta/Fault/NoExisteTipoPublicacion"),
        @FaultAction(className = NoExisteKeyword_Exception.class, value = "http://servidor/Publicador/ingresarOferta/Fault/NoExisteKeyword")
    })
    public void ingresarOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        double arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7,
        @WebParam(name = "arg8", partName = "arg8")
        XMLGregorianCalendar arg8,
        @WebParam(name = "arg9", partName = "arg9")
        StringArray arg9,
        @WebParam(name = "arg10", partName = "arg10")
        String arg10,
        @WebParam(name = "arg11", partName = "arg11")
        byte[] arg11)
        throws NoExisteEmpresa_Exception, NoExisteKeyword_Exception, NoExisteTipoPublicacion_Exception, NombreOfertaExistente_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @throws NoExisteEmpresa_Exception
     * @throws NoExisteOferta_Exception
     * @throws NoExistePaquete_Exception
     * @throws NoExisteTipoPublicacion_Exception
     * @throws NoHayTPRestantes_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/pagarConPaqueteRequest", output = "http://servidor/Publicador/pagarConPaqueteResponse", fault = {
        @FaultAction(className = NoExistePaquete_Exception.class, value = "http://servidor/Publicador/pagarConPaquete/Fault/NoExistePaquete"),
        @FaultAction(className = NoExisteTipoPublicacion_Exception.class, value = "http://servidor/Publicador/pagarConPaquete/Fault/NoExisteTipoPublicacion"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/pagarConPaquete/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/pagarConPaquete/Fault/NoExisteOferta"),
        @FaultAction(className = NoHayTPRestantes_Exception.class, value = "http://servidor/Publicador/pagarConPaquete/Fault/NoHayTPRestantes")
    })
    public void pagarConPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws NoExisteEmpresa_Exception, NoExisteOferta_Exception, NoExistePaquete_Exception, NoExisteTipoPublicacion_Exception, NoHayTPRestantes_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.StringArray
     * @throws NoExisteTipoPublicacion_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarNombresTiposRequest", output = "http://servidor/Publicador/listarNombresTiposResponse", fault = {
        @FaultAction(className = NoExisteTipoPublicacion_Exception.class, value = "http://servidor/Publicador/listarNombresTipos/Fault/NoExisteTipoPublicacion")
    })
    public StringArray listarNombresTipos()
        throws NoExisteTipoPublicacion_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOferta
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getDTOfertaRequest", output = "http://servidor/Publicador/getDTOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/getDTOferta/Fault/NoExisteOferta")
    })
    public DtOferta getDTOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.StringArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarPaquetesRegistradosRequest", output = "http://servidor/Publicador/listarPaquetesRegistradosResponse")
    public StringArray listarPaquetesRegistrados();

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @param arg6
     * @param arg7
     * @param arg8
     * @throws CorreoUsuarioExistente_Exception
     * @throws NicknameUsuarioExistente_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/darAltaEmpresaRequest", output = "http://servidor/Publicador/darAltaEmpresaResponse", fault = {
        @FaultAction(className = NicknameUsuarioExistente_Exception.class, value = "http://servidor/Publicador/darAltaEmpresa/Fault/NicknameUsuarioExistente"),
        @FaultAction(className = CorreoUsuarioExistente_Exception.class, value = "http://servidor/Publicador/darAltaEmpresa/Fault/CorreoUsuarioExistente")
    })
    public void darAltaEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        byte[] arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8)
        throws CorreoUsuarioExistente_Exception, NicknameUsuarioExistente_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @param arg6
     * @param arg7
     * @param arg8
     * @throws CorreoUsuarioExistente_Exception
     * @throws NicknameUsuarioExistente_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/darAltaPostulanteRequest", output = "http://servidor/Publicador/darAltaPostulanteResponse", fault = {
        @FaultAction(className = NicknameUsuarioExistente_Exception.class, value = "http://servidor/Publicador/darAltaPostulante/Fault/NicknameUsuarioExistente"),
        @FaultAction(className = CorreoUsuarioExistente_Exception.class, value = "http://servidor/Publicador/darAltaPostulante/Fault/CorreoUsuarioExistente")
    })
    public void darAltaPostulante(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        byte[] arg6,
        @WebParam(name = "arg7", partName = "arg7")
        XMLGregorianCalendar arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8)
        throws CorreoUsuarioExistente_Exception, NicknameUsuarioExistente_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esNickValidoRequest", output = "http://servidor/Publicador/esNickValidoResponse")
    public boolean esNickValido(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @throws ErrorFecha_Exception
     * @throws NoExisteOferta_Exception
     * @throws NoExistePostulante_Exception
     * @throws OfertaExpirada_Exception
     * @throws PostulantePoseeOferta_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/postularAOfertaRequest", output = "http://servidor/Publicador/postularAOfertaResponse", fault = {
        @FaultAction(className = OfertaExpirada_Exception.class, value = "http://servidor/Publicador/postularAOferta/Fault/OfertaExpirada"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/postularAOferta/Fault/NoExistePostulante"),
        @FaultAction(className = PostulantePoseeOferta_Exception.class, value = "http://servidor/Publicador/postularAOferta/Fault/PostulantePoseeOferta"),
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/postularAOferta/Fault/NoExisteOferta"),
        @FaultAction(className = ErrorFecha_Exception.class, value = "http://servidor/Publicador/postularAOferta/Fault/ErrorFecha")
    })
    public void postularAOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5)
        throws ErrorFecha_Exception, NoExisteOferta_Exception, NoExistePostulante_Exception, OfertaExpirada_Exception, PostulantePoseeOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @return
     *     returns servidor.DtPostulacion
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getDTPostulacionRequest", output = "http://servidor/Publicador/getDTPostulacionResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/getDTPostulacion/Fault/NoExisteOferta")
    })
    public DtPostulacion getDTPostulacion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DtOfertaArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getOfertasVigentesOrdenadasRequest", output = "http://servidor/Publicador/getOfertasVigentesOrdenadasResponse")
    public DtOfertaArray getOfertasVigentesOrdenadas();

    /**
     * 
     * @param arg0
     * @param arg1
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/iniciarSesionRequest", output = "http://servidor/Publicador/iniciarSesionResponse")
    public boolean iniciarSesion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esEmpresaRequest", output = "http://servidor/Publicador/esEmpresaResponse")
    public boolean esEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @return
     *     returns servidor.DtEmpresaArray
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     * @throws NoExistenEmpresas_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarDTEmpresasRequest", output = "http://servidor/Publicador/mostrarDTEmpresasResponse", fault = {
        @FaultAction(className = NoExistenEmpresas_Exception.class, value = "http://servidor/Publicador/mostrarDTEmpresas/Fault/NoExistenEmpresas"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarDTEmpresas/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/mostrarDTEmpresas/Fault/NoExistePostulante")
    })
    public DtEmpresaArray mostrarDTEmpresas()
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception, NoExistenEmpresas_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/incrementarCantVisitasRequest", output = "http://servidor/Publicador/incrementarCantVisitasResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/incrementarCantVisitas/Fault/NoExisteOferta")
    })
    public void incrementarCantVisitas(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtPostulante
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getDtPostulanteRequest", output = "http://servidor/Publicador/getDtPostulanteResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/getDtPostulante/Fault/NoExistePostulante")
    })
    public DtPostulante getDtPostulante(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtEmpresa
     * @throws NoExisteEmpresa_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getDtEmpresaRequest", output = "http://servidor/Publicador/getDtEmpresaResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/getDtEmpresa/Fault/NoExisteEmpresa")
    })
    public DtEmpresa getDtEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOfertaArray
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarInfoBasicaOfertasRequest", output = "http://servidor/Publicador/mostrarInfoBasicaOfertasResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/mostrarInfoBasicaOfertas/Fault/NoExistePostulante"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarInfoBasicaOfertas/Fault/NoExisteEmpresa")
    })
    public DtOfertaArray mostrarInfoBasicaOfertas(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOfertaArray
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarOfertasConfirmadasRequest", output = "http://servidor/Publicador/mostrarOfertasConfirmadasResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarOfertasConfirmadas/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/mostrarOfertasConfirmadas/Fault/NoExistePostulante")
    })
    public DtOfertaArray mostrarOfertasConfirmadas(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtCompraArray
     * @throws NoExisteEmpresa_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getDTComprasEmpresaRequest", output = "http://servidor/Publicador/getDTComprasEmpresaResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/getDTComprasEmpresa/Fault/NoExisteEmpresa")
    })
    public DtCompraArray getDTComprasEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/seguirUsuarioRequest", output = "http://servidor/Publicador/seguirUsuarioResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/seguirUsuario/Fault/NoExistePostulante"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/seguirUsuario/Fault/NoExisteEmpresa")
    })
    public void seguirUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/dejarDeSeguirUsuarioRequest", output = "http://servidor/Publicador/dejarDeSeguirUsuarioResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/dejarDeSeguirUsuario/Fault/NoExistePostulante"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/dejarDeSeguirUsuario/Fault/NoExisteEmpresa")
    })
    public void dejarDeSeguirUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePaquete_Exception
     * @throws ParseException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/ingresarPaqueteAEmpresaRequest", output = "http://servidor/Publicador/ingresarPaqueteAEmpresaResponse", fault = {
        @FaultAction(className = NoExistePaquete_Exception.class, value = "http://servidor/Publicador/ingresarPaqueteAEmpresa/Fault/NoExistePaquete"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/ingresarPaqueteAEmpresa/Fault/NoExisteEmpresa"),
        @FaultAction(className = ParseException_Exception.class, value = "http://servidor/Publicador/ingresarPaqueteAEmpresa/Fault/ParseException")
    })
    public void ingresarPaqueteAEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        XMLGregorianCalendar arg2)
        throws NoExisteEmpresa_Exception, NoExistePaquete_Exception, ParseException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtPaquete
     * @throws NoExistePaquete_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getInfoPaqueteConImgRequest", output = "http://servidor/Publicador/getInfoPaqueteConImgResponse", fault = {
        @FaultAction(className = NoExistePaquete_Exception.class, value = "http://servidor/Publicador/getInfoPaqueteConImg/Fault/NoExistePaquete")
    })
    public DtPaquete getInfoPaqueteConImg(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePaquete_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @param arg6
     * @param arg7
     * @throws NoExisteEmpresa_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/modificarDatosEmpresaRequest", output = "http://servidor/Publicador/modificarDatosEmpresaResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/modificarDatosEmpresa/Fault/NoExisteEmpresa")
    })
    public void modificarDatosEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        byte[] arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7)
        throws NoExisteEmpresa_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @param arg6
     * @param arg7
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/modificarDatosPostulanteRequest", output = "http://servidor/Publicador/modificarDatosPostulanteResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/modificarDatosPostulante/Fault/NoExistePostulante")
    })
    public void modificarDatosPostulante(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        byte[] arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        XMLGregorianCalendar arg7)
        throws NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOfertaArray
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarOfertasConfirmadasNoVigentesRequest", output = "http://servidor/Publicador/mostrarOfertasConfirmadasNoVigentesResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarOfertasConfirmadasNoVigentes/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/mostrarOfertasConfirmadasNoVigentes/Fault/NoExistePostulante")
    })
    public DtOfertaArray mostrarOfertasConfirmadasNoVigentes(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOfertaArray
     * @throws NoExisteEmpresa_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarOfertasConfirmadasVigentesRequest", output = "http://servidor/Publicador/mostrarOfertasConfirmadasVigentesResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarOfertasConfirmadasVigentes/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/mostrarOfertasConfirmadasVigentes/Fault/NoExistePostulante")
    })
    public DtOfertaArray mostrarOfertasConfirmadasVigentes(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @throws NoExisteEmpresa_Exception
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/finalizarOfertaRequest", output = "http://servidor/Publicador/finalizarOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/finalizarOferta/Fault/NoExisteOferta"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/finalizarOferta/Fault/NoExisteEmpresa")
    })
    public void finalizarOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws NoExisteEmpresa_Exception, NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws NoExisteOferta_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/guardarDatosOfertaRequest", output = "http://servidor/Publicador/guardarDatosOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/guardarDatosOferta/Fault/NoExisteOferta"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/guardarDatosOferta/Fault/NoExistePostulante")
    })
    public void guardarDatosOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteOferta_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOfertaArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarOfertasFinalizadasAsocRequest", output = "http://servidor/Publicador/listarOfertasFinalizadasAsocResponse")
    public DtOfertaArray listarOfertasFinalizadasAsoc(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.StringArray
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getFavoritosUsuarioRequest", output = "http://servidor/Publicador/getFavoritosUsuarioResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/getFavoritosUsuario/Fault/NoExistePostulante")
    })
    public StringArray getFavoritosUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @throws NoExisteOferta_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/marcarFavoritoRequest", output = "http://servidor/Publicador/marcarFavoritoResponse", fault = {
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/marcarFavorito/Fault/NoExistePostulante"),
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/marcarFavorito/Fault/NoExisteOferta")
    })
    public void marcarFavorito(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        boolean arg2)
        throws NoExisteOferta_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @throws NoExisteOfertaEmpresa_Exception
     * @throws NoExisteOferta_Exception
     * @throws NoExistePostulante_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/asignarOrdenPostulacionRequest", output = "http://servidor/Publicador/asignarOrdenPostulacionResponse", fault = {
        @FaultAction(className = NoExisteOfertaEmpresa_Exception.class, value = "http://servidor/Publicador/asignarOrdenPostulacion/Fault/NoExisteOfertaEmpresa"),
        @FaultAction(className = NoExistePostulante_Exception.class, value = "http://servidor/Publicador/asignarOrdenPostulacion/Fault/NoExistePostulante"),
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/asignarOrdenPostulacion/Fault/NoExisteOferta")
    })
    public void asignarOrdenPostulacion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3)
        throws NoExisteOfertaEmpresa_Exception, NoExisteOferta_Exception, NoExistePostulante_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/cambiarEstadoOfertaRequest", output = "http://servidor/Publicador/cambiarEstadoOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/cambiarEstadoOferta/Fault/NoExisteOferta")
    })
    public void cambiarEstadoOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        Estados arg1)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/vigenciaOfertaRequest", output = "http://servidor/Publicador/vigenciaOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/vigenciaOferta/Fault/NoExisteOferta")
    })
    public boolean vigenciaOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.StringArray
     * @throws NoExisteEmpresa_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarComprasPaquetesEmpresaRequest", output = "http://servidor/Publicador/mostrarComprasPaquetesEmpresaResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarComprasPaquetesEmpresa/Fault/NoExisteEmpresa")
    })
    public StringArray mostrarComprasPaquetesEmpresa(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.StringArray
     * @throws NoExisteEmpresa_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/mostrarOfertasDeEmpresaIngresadasRequest", output = "http://servidor/Publicador/mostrarOfertasDeEmpresaIngresadasResponse", fault = {
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/mostrarOfertasDeEmpresaIngresadas/Fault/NoExisteEmpresa")
    })
    public StringArray mostrarOfertasDeEmpresaIngresadas(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteEmpresa_Exception
    ;

    /**
     * 
     * @param arg0
     * @param arg1
     * @param arg2
     * @param arg3
     * @param arg4
     * @param arg5
     * @param arg6
     * @param arg7
     * @param arg8
     * @param arg9
     * @throws NoExisteEmpresa_Exception
     * @throws NoExisteKeyword_Exception
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/modificarOfertaRequest", output = "http://servidor/Publicador/modificarOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/modificarOferta/Fault/NoExisteOferta"),
        @FaultAction(className = NoExisteEmpresa_Exception.class, value = "http://servidor/Publicador/modificarOferta/Fault/NoExisteEmpresa"),
        @FaultAction(className = NoExisteKeyword_Exception.class, value = "http://servidor/Publicador/modificarOferta/Fault/NoExisteKeyword")
    })
    public void modificarOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        double arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        StringArray arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8,
        @WebParam(name = "arg9", partName = "arg9")
        byte[] arg9)
        throws NoExisteEmpresa_Exception, NoExisteKeyword_Exception, NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns int
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getExposicionOfertaRequest", output = "http://servidor/Publicador/getExposicionOfertaResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/getExposicionOferta/Fault/NoExisteOferta")
    })
    public int getExposicionOferta(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtOferta
     * @throws NoExisteOferta_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getDTOfertaDAORequest", output = "http://servidor/Publicador/getDTOfertaDAOResponse", fault = {
        @FaultAction(className = NoExisteOferta_Exception.class, value = "http://servidor/Publicador/getDTOfertaDAO/Fault/NoExisteOferta")
    })
    public DtOferta getDTOfertaDAO(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExisteOferta_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DtPostulacionArray
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarDTPostulacionesDBRequest", output = "http://servidor/Publicador/listarDTPostulacionesDBResponse")
    public DtPostulacionArray listarDTPostulacionesDB(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

}
